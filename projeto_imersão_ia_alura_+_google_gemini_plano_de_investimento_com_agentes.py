# -*- coding: utf-8 -*-
"""Projeto Imers√£o IA Alura + Google Gemini - Plano de Investimento com Agentes

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OpJ3usrWoUQM563hZSwVhW8v9BLgvMAI
"""

# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings

warnings.filterwarnings("ignore")

def call_agent(agent: Agent, message_text: str) -> str:
    session_service = InMemorySessionService()

    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

# Agente 1: Diagn√≥stico financeiro
def agente_diagnostico(dados_cliente):

    diagnostico = Agent(
        name="agente_diagnostico",
        model="gemini-2.0-flash",
        instruction="""
         Voc√™ √© um especialista financeiro. Seu trabalho √© analisar a situa√ß√£o atual do cliente, considerando:
        - Patrim√¥nio investido
        - Dividendos mensais recebidos
        - Valor dos aportes mensais
        - Rentabilidade m√©dia esperada
        Com base nisso, fa√ßa uma simula√ß√£o de em quantos anos ele poder√° atingir R$ 1 milh√£o em patrim√¥nio, considerando juros compostos.
        Mostre cen√°rios otimista, realista e conservador.
        """,
        description="Agente que coleta os fundamentos mais relevantes",
        tools=[google_search]
    )

    entrada = f"Dados do cliente: {dados_cliente}"
    resultado = call_agent(diagnostico, entrada)
    return resultado

# Agente 2: Otimizador de Investimentos
def agente_otimizador(carteira_atual):
    otimizador = Agent(
        name="agente_otimizador",
        model="gemini-2.0-flash",
        instruction="""
        Voc√™ √© um analista de investimentos. Sua fun√ß√£o √© avaliar a carteira atual do cliente e sugerir melhorias:
        - Rebalancear entre a√ß√µes, renda fixa e fundos
        - Reduzir risco (se necess√°rio) ou aumentar retorno potencial
        - Considerar perfil de investidor (conservador, moderado, arrojado)
        Apresente sugest√µes pr√°ticas e justificadas.
        Use a ferramenta de busca do Google (google_search) para observar as possiveis todas as amea√ßas dentro do setor financeiro,
        como aumento de taxas, situa√ß√µes que afetam o investimento indiretamente.
        Voc√™ tamb√©m pode usar o (google_search) para encontrar mais
        informa√ß√µes sobre os temas e aprofundar.
        Ao final, voc√™ ir√° escolher as informa√ß√µes mais relevante com base nas suas pesquisas
        e retornar como alerta ao cliente, seus pontos mais relevantes, e um plano abordando as amea√ßas e como evitalas no futuro.
        """,
        description="Agente que cria plano seguro e cautelo, dentro do perfil do cliente",
        tools=[google_search]
    )

    entrada = f"Carteira atual: {carteira_atual}"

    resultado = call_agent(otimizador, entrada)
    return resultado

# Agente 3: Planejador de Metas e Aportes
def agente_planejador(dados_cliente):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        instruction="""
            Voc√™ √© um planejador financeiro. Sua tarefa √© criar um plano estrat√©gico para o cliente alcan√ßar R$ 1 milh√£o:
        - Defina metas mensais e anuais
        - Modele aportes crescentes ao longo dos anos
        - Crie cen√°rios conservador, realista e agressivo
        O plano deve ser pr√°tico, aplic√°vel e baseado nos dados fornecidos.
        Aponte observa√ß√µes que o cliente deve ser atento.
            """,
        description="Agente planejador de metas financeiras"
    )
    entrada = f"Informa√ß√µes do cliente: {dados_cliente}"

    resultado = call_agent(planejador, entrada)
    return resultado

data_de_hoje = date.today().strftime("%d/%m/%Y")

print("\nüìà Sistema Estrat√©gico para Rumo ao 1 Milh√£o Ativado! üìà")

print("\nVamos come√ßar com uma an√°lise completa da sua situa√ß√£o atual.")

objetivo = input("\nDigite seu objetivo financeiro ou descri√ß√£o da sua situa√ß√£o atual:")

if not objetivo:
    print("\n‚ö†Ô∏è Voc√™ precisa informar a sua situa√ß√£o financeira para prosseguir!")

else:
    print(f"Beleza! Bora ent√£o criar seu plano financeiro {objetivo}")

    print("\n‚úÖ Diagn√≥stico Inicial")
    resultado1 = agente_diagnostico(objetivo)
    display(to_markdown(resultado1))

    print("\nüìä Otimizando sua carteira")
    resultado2 = agente_otimizador(objetivo)
    display(to_markdown(resultado2))

    print("\nüéØ Criando o Plano Estrat√©gico de Aportes")
    resultado3 = agente_planejador(objetivo)
    display(to_markdown(resultado3))